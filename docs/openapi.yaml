openapi: 3.0.3
info:
  title: ShareIt API
  description: P2P платформа для аренды вещей между пользователями
  version: 1.0.0
  contact:
    name: API Support
    email: support@shareit.com

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /users:
    post:
      summary: Создание нового пользователя
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '200':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Невалидные данные
        '409':
          description: Пользователь с таким email уже существует

    get:
      summary: Получение всех пользователей
      tags:
        - Users
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'

  /users/{userId}:
    get:
      summary: Получение пользователя по ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Пользователь найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: Пользователь не найден

    patch:
      summary: Обновление пользователя
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: Пользователь не найден

    delete:
      summary: Удаление пользователя
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Пользователь удален
        '404':
          description: Пользователь не найден

  /items:
    post:
      summary: Добавление новой вещи
      tags:
        - Items
      parameters:
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemDto'
      responses:
        '200':
          description: Вещь успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDto'
        '400':
          description: Невалидные данные
        '404':
          description: Пользователь не найден

    get:
      summary: Получение всех вещей владельца
      tags:
        - Items
      parameters:
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Список вещей владельца
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDto'

  /items/{itemId}:
    get:
      summary: Получение вещи по ID
      tags:
        - Items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Вещь найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDto'
        '404':
          description: Вещь не найдена

    patch:
      summary: Обновление вещи
      tags:
        - Items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreateDto'
      responses:
        '200':
          description: Вещь обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDto'
        '404':
          description: Вещь не найдена

  /items/search:
    get:
      summary: Поиск вещей по тексту
      tags:
        - Items
      parameters:
        - name: text
          in: query
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: Результаты поиска
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDto'
        '400':
          description: Текст запроса пустой

  /bookings:
    post:
      summary: Создание бронирования
      tags:
        - Bookings
      parameters:
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequestDto'
      responses:
        '200':
          description: Бронирование создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponseDto'
        '400':
          description: Невалидные данные или даты
        '404':
          description: Вещь не найдена

    get:
      summary: Получение бронирований пользователя
      tags:
        - Bookings
      parameters:
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
        - name: state
          in: query
          schema:
            type: string
            enum: [ALL, CURRENT, PAST, FUTURE, WAITING, REJECTED]
            default: ALL
        - name: from
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
      responses:
        '200':
          description: Список бронирований
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponseDto'

  /bookings/{bookingId}:
    get:
      summary: Получение бронирования по ID
      tags:
        - Bookings
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Бронирование найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponseDto'
        '404':
          description: Бронирование не найдено

    patch:
      summary: Подтверждение/отклонение бронирования
      tags:
        - Bookings
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
        - name: approved
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Статус бронирования обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponseDto'
        '404':
          description: Бронирование не найдено

  /bookings/owner:
    get:
      summary: Получение бронирований владельца
      tags:
        - Bookings
      parameters:
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
        - name: state
          in: query
          schema:
            type: string
            enum: [ALL, CURRENT, PAST, FUTURE, WAITING, REJECTED]
            default: ALL
        - name: from
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            default: 10
      responses:
        '200':
          description: Список бронирований владельца
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponseDto'

  /items/{itemId}/comment:
    post:
      summary: Добавление комментария к вещи
      tags:
        - Comments
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        '200':
          description: Комментарий добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
        '400':
          description: Невалидные данные
        '404':
          description: Вещь не найдена

  /requests:
    post:
      summary: Создание запроса на вещь
      tags:
        - Requests
      parameters:
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequestDto'
      responses:
        '200':
          description: Запрос создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemRequestDto'
        '400':
          description: Невалидные данные

    get:
      summary: Получение запросов пользователя
      tags:
        - Requests
      parameters:
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Список запросов пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemRequestDto'

  /requests/all:
    get:
      summary: Получение всех запросов
      tags:
        - Requests
      parameters:
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Список всех запросов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemRequestDto'

  /requests/{requestId}:
    get:
      summary: Получение запроса по ID
      tags:
        - Requests
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: X-Sharer-User-Id
          in: header
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Запрос найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemRequestDto'
        '404':
          description: Запрос не найден

components:
  schemas:
    UserCreateDto:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: Имя пользователя
          minLength: 1
        email:
          type: string
          format: email
          description: Email пользователя
      example:
        name: "John Doe"
        email: "john.doe@example.com"

    UserDto:
      type: object
      properties:
        id:
          type: integer
          description: ID пользователя
        name:
          type: string
          description: Имя пользователя
        email:
          type: string
          format: email
          description: Email пользователя

    ItemDto:
      type: object
      required:
        - name
        - description
        - available
      properties:
        id:
          type: integer
          description: ID вещи
        name:
          type: string
          description: Название вещи
          minLength: 1
        description:
          type: string
          description: Описание вещи
          minLength: 1
        available:
          type: boolean
          description: Доступна ли вещь для бронирования
        owner:
          $ref: '#/components/schemas/UserDto'
        requestId:
          type: integer
          description: ID запроса, если вещь создана по запросу
        lastBooking:
          $ref: '#/components/schemas/BookingShortDto'
        nextBooking:
          $ref: '#/components/schemas/BookingShortDto'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDto'

    ItemCreateDto:
      type: object
      properties:
        name:
          type: string
          description: Название вещи
        description:
          type: string
          description: Описание вещи
        available:
          type: boolean
          description: Доступна ли вещь для бронирования
        requestId:
          type: integer
          description: ID запроса

    BookingRequestDto:
      type: object
      required:
        - itemId
        - start
        - end
      properties:
        itemId:
          type: integer
          description: ID вещи для бронирования
        start:
          type: string
          format: date-time
          description: Дата и время начала бронирования
        end:
          type: string
          format: date-time
          description: Дата и время окончания бронирования

    BookingResponseDto:
      type: object
      properties:
        id:
          type: integer
          description: ID бронирования
        start:
          type: string
          format: date-time
          description: Дата и время начала бронирования
        end:
          type: string
          format: date-time
          description: Дата и время окончания бронирования
        status:
          type: string
          enum: [WAITING, APPROVED, REJECTED, CANCELED]
          description: Статус бронирования
        item:
          $ref: '#/components/schemas/ItemDto'
        booker:
          $ref: '#/components/schemas/UserDto'

    BookingShortDto:
      type: object
      properties:
        id:
          type: integer
          description: ID бронирования
        bookerId:
          type: integer
          description: ID пользователя, который забронировал
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time

    CommentDto:
      type: object
      required:
        - text
      properties:
        id:
          type: integer
          description: ID комментария
        text:
          type: string
          description: Текст комментария
          minLength: 1
        item:
          $ref: '#/components/schemas/ItemDto'
        authorName:
          type: string
          description: Имя автора комментария
        created:
          type: string
          format: date-time
          description: Дата и время создания комментария

    CreateItemRequestDto:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          description: Описание запрашиваемой вещи
          minLength: 1
          maxLength: 512

    ItemRequestDto:
      type: object
      properties:
        id:
          type: integer
          description: ID запроса
        description:
          type: string
          description: Описание запроса
        requestorId:
          type: integer
          description: ID пользователя, создавшего запрос
        created:
          type: string
          format: date-time
          description: Дата и время создания запроса
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemRequestCreateDto'

    ItemRequestCreateDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        ownerId:
          type: integer

  securitySchemes:
    UserIdHeader:
      type: apiKey
      in: header
      name: X-Sharer-User-Id

security:
  - UserIdHeader: []

tags:
  - name: Users
    description: Управление пользователями
  - name: Items
    description: Управление вещами
  - name: Bookings
    description: Управление бронированиями
  - name: Requests
    description: Управление запросами на вещи
  - name: Comments
    description: Управление комментариями